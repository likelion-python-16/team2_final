# Generated by Django 5.2.6 on 2025-09-17 06:59

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='로그인에 사용할 아이디 (영문, 숫자 조합)', max_length=150, unique=True, verbose_name='아이디')),
                ('email', models.EmailField(help_text='연락용 이메일 주소', max_length=254, verbose_name='이메일')),
                ('nickname', models.CharField(help_text='화면에 표시될 이름', max_length=50, verbose_name='닉네임')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='가입일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자 목록',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('male', '남성'), ('female', '여성'), ('other', '기타')], max_length=10, null=True, verbose_name='성별')),
                ('height_cm', models.IntegerField(blank=True, help_text='100-250cm 사이로 입력해주세요', null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)], verbose_name='키 (cm)')),
                ('weight_kg', models.FloatField(blank=True, help_text='30-200kg 사이로 입력해주세요', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='현재 몸무게 (kg)')),
                ('target_weight_kg', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='목표 체중 (kg)')),
                ('activity_level', models.IntegerField(choices=[(1, '매우 적음 (하루 종일 앉아서 생활)'), (2, '적음 (가끔 산책, 계단 이용)'), (3, '보통 (주 2-3회 30분 운동)'), (4, '많음 (주 4-5회 1시간 운동)'), (5, '매우 많음 (매일 고강도 운동)')], default=2, help_text='평소 운동량과 생활 패턴을 고려해주세요', verbose_name='활동량')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='생년월일')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='전화번호')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '사용자 프로필',
                'verbose_name_plural': '사용자 프로필 목록',
            },
        ),
        migrations.CreateModel(
            name='HealthData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='날짜')),
                ('weight_kg', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='오늘의 체중 (kg)')),
                ('body_fat_percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='체지방률 (%)')),
                ('muscle_mass_kg', models.FloatField(blank=True, null=True, verbose_name='근육량 (kg)')),
                ('blood_pressure_systolic', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(80), django.core.validators.MaxValueValidator(200)], verbose_name='수축기 혈압 (mmHg)')),
                ('blood_pressure_diastolic', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(120)], verbose_name='이완기 혈압 (mmHg)')),
                ('heart_rate_bpm', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(150)], verbose_name='안정시 심박수 (bpm)')),
                ('sleep_hours', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)], verbose_name='수면시간 (시간)')),
                ('sleep_quality', models.IntegerField(blank=True, choices=[(1, '1점'), (2, '2점'), (3, '3점'), (4, '4점'), (5, '5점')], null=True, verbose_name='수면 질 (1-5점)')),
                ('water_intake_ml', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5000)], verbose_name='물 섭취량 (ml)')),
                ('stress_level', models.IntegerField(blank=True, choices=[(1, '매우 낮음'), (2, '낮음'), (3, '보통'), (4, '높음'), (5, '매우 높음')], null=True, verbose_name='스트레스 수준')),
                ('mood_score', models.IntegerField(blank=True, choices=[(1, '매우 나쁨'), (2, '나쁨'), (3, '보통'), (4, '좋음'), (5, '매우 좋음')], null=True, verbose_name='기분 점수')),
                ('steps_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)], verbose_name='걸음 수')),
                ('exercise_minutes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)], verbose_name='운동 시간 (분)')),
                ('notes', models.TextField(blank=True, help_text='오늘의 건강 상태나 특이사항을 기록해주세요', verbose_name='메모')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_data', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '건강 데이터',
                'verbose_name_plural': '건강 데이터 목록',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
