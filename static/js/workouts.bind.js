/* static/js/workouts.bind.js
 * Workouts page bindings (C1~C6 + ÎÇ†Ïßú/Ï£ºÍ∞Ñ/¬± ÎÇ¥ÎπÑ)
 * - ÏõêÏπô: "Ï∂îÍ∞ÄÎßå" (Í∏∞Ï°¥ ÏΩîÎìú/ÌååÏùºÏùÄ ÏàòÏ†ïÌïòÏßÄ ÏïäÏùå)
 * - ÏùòÏ°¥(ÏûàÏúºÎ©¥ ÏÇ¨Ïö©): window.authHeaders, showLoading/hideLoading, toastError, formatYMD, openPlanWizard
 * - HTML ÌõÖ: #wk-plan-date, #wk-load-by-date, #wk-ensure-today, #wk-days, #wk-prev-day, #wk-next-day, #wk-current-label,
 *            #wk-plan-date-label, #wk-plan-id, #wk-plan-taskcount, #wk-plan-duration, #wk-tasks-list
 */
(function () {
  "use strict";

  // ========= Í≥µÌÜµ =========
  const API_BASE = (typeof window.API === "string" && window.API) ? window.API : "/api";

  // CSRF (ÌÖúÌîåÎ¶ø ÏÑ∏ÏÖò ÏÇ¨Ïö© Ïãú ÎåÄÎπÑ)
  function getCookie(name) {
    const m = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
    return m ? m.pop() : '';
  }

  // üîê ÏïàÏ†ÑÌïú Ìó§Îçî ÎûòÌçº: ÌîÑÎ°úÏ†ùÌä∏Ïùò Í≥µÌÜµ authHeaders()Í∞Ä ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
  function authHeaders() {
    if (typeof window.authHeaders === "function") return window.authHeaders();
    const headers = { "Content-Type": "application/json" };
    const csrf = getCookie("csrftoken");
    if (csrf) headers["X-CSRFToken"] = csrf;
    // JWTÎ•º localStorageÏóê Ï†ÄÏû•ÌïòÎäî Ìå®ÌÑ¥Ïùº Í≤ΩÏö∞(Î∞±ÏóîÎìúÍ∞Ä JWT) Fallback
    const access = localStorage.getItem("access");
    if (access) headers["Authorization"] = `Bearer ${access}`;
    return headers;
  }

  // ========= ÎÇ†Ïßú Ïú†Ìã∏ (KST Í∏∞Ï§Ä) =========
  function toKST(d) {
    return new Date(d.toLocaleString("en-US", { timeZone: "Asia/Seoul" }));
  }
  function startOfDayKST(d) {
    const t = toKST(d);
    return new Date(t.getFullYear(), t.getMonth(), t.getDate());
  }
  function addDays(d, n) {
    const x = new Date(d);
    x.setDate(x.getDate() + n);
    return x;
  }
  function fmtISO(d) {
    if (typeof window.formatYMD === "function") return window.formatYMD(d);
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    return `${y}-${m}-${dd}`;
  }
  const DAYS_KO = ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"];

  // ========= ÏÉÅÌÉú =========
  const TODAY = startOfDayKST(new Date());
  const RANGE_START = addDays(TODAY, -59); // ÏµúÍ∑º 60Ïùº
  const RANGE_END = TODAY;

  let selectedDate = TODAY;         // ÌòÑÏû¨ ÏÑ†ÌÉù ÎÇ†Ïßú
  let isInitBound = false;          // Ïù¥Î≤§Ìä∏ Ï§ëÎ≥µ Î∞©ÏßÄ
  let ENSURE_URL = `${API_BASE}/workoutplans/today/ensure/`;

  // ========= DOM Ï∫êÏãú =========
  const $daysWrap = document.getElementById("wk-days");
  const $dateInput = document.getElementById("wk-plan-date");
  const $loadByDate = document.getElementById("wk-load-by-date");
  const $ensureToday = document.getElementById("wk-ensure-today");
  const $label = document.getElementById("wk-current-label");

  const $planDateLabel = document.getElementById("wk-plan-date-label");
  const $planIdEl = document.getElementById("wk-plan-id");
  const $planCntEl = document.getElementById("wk-plan-taskcount");
  const $planMinEl = document.getElementById("wk-plan-duration");
  const $list = document.getElementById("wk-tasks-list");

  // ========= Week Bar Î†åÎçî =========
  function startOfWeekMon(d) {
    const wd = d.getDay(); // 0=Ïùº
    const diff = (wd === 0) ? -6 : (1 - wd); // Ïõî=1
    return addDays(d, diff);
  }

  function renderWeekBar(centerDate) {
    if (!$daysWrap) return;

    const start = startOfWeekMon(centerDate);
    const days = Array.from({ length: 7 }, (_, i) => addDays(start, i));

    const selectedISO = fmtISO(selectedDate);
    $daysWrap.innerHTML = days.map((d) => {
      const isActive = fmtISO(d) === selectedISO;
      const label = `${d.getMonth() + 1}/${d.getDate()}`;
      const day = DAYS_KO[d.getDay()];
      return `
        <button type="button" class="wk-day ${isActive ? "is-active" : ""}" data-date="${fmtISO(d)}" aria-pressed="${isActive}">
          <span class="label">${day}</span>
          <span class="date">${label}</span>
        </button>
      `;
    }).join("");

    // Î≤ÑÌäº Ìï∏Îì§Îü¨ Î∂ÄÏ∞©
    $daysWrap.querySelectorAll(".wk-day").forEach((btn) => {
      btn.addEventListener("click", () => {
        const iso = btn.dataset.date;
        const d = new Date(iso + "T00:00:00");
        selectDate(d, { load: true, rerender: true });
      });
    });

    if ($label) {
      $label.textContent = `${selectedDate.getMonth() + 1}/${selectedDate.getDate()} (${DAYS_KO[selectedDate.getDay()]})`;
    }
  }

  // ========= ÎÇ†Ïßú Î≤îÏúÑ Î≥¥Ï†ï =========
  function clampToRange(d) {
    if (d < RANGE_START) return RANGE_START;
    if (d > RANGE_END) return RANGE_END;
    return d;
  }

  // ========= ÎÇ†Ïßú ÏÑ†ÌÉù Ï≤òÎ¶¨ =========
  async function selectDate(d, opts = { load: true, rerender: true }) {
    selectedDate = clampToRange(startOfDayKST(d));
    if ($dateInput) {
      $dateInput.min = fmtISO(RANGE_START);
      $dateInput.max = fmtISO(RANGE_END);
      $dateInput.value = fmtISO(selectedDate);
    }
    if (opts.rerender) renderWeekBar(selectedDate);
    if (opts.load) await reloadPlanFor(selectedDate);
  }

  // ========= Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ =========
  async function fetchDayItems(iso) {
    try {
      const r = await fetch(`${API_BASE}/taskitems/?date=${encodeURIComponent(iso)}`, {
        headers: authHeaders(),
        credentials: "same-origin",
      });
      if (!r.ok) return [];
      const data = await r.json().catch(() => []);
      // pagination Ìò∏Ìôò
      return Array.isArray(data) ? data : (Array.isArray(data?.results) ? data.results : []);
    } catch {
      return [];
    }
  }

  // by-date ‚Üí plans (Ïó¨Îü¨ Í∞úÎ©¥ Ï≤´ Î≤àÏß∏)
  async function fetchPlansByDate(iso) {
    try {
      const r = await fetch(`${API_BASE}/workoutplans/by-date/?date=${encodeURIComponent(iso)}`, {
        headers: authHeaders(),
        credentials: "same-origin",
      });
      const data = await r.json().catch(() => []);
      const arr = Array.isArray(data) ? data : (Array.isArray(data?.results) ? data.results : []);
      return { ok: r.ok, plans: arr };
    } catch {
      return { ok: false, plans: [] };
    }
  }

  // ========= ÌîåÎûú Î°úÎî©(ÎÇ†Ïßú Í∏∞Ï§Ä) & Î†åÎçî =========
  async function reloadPlanFor(d) {
    const iso = fmtISO(d);
    if (typeof showLoading === "function") showLoading("Loading workout plan...");

    try {
      // 1) ÌîåÎûú ÌõÑÎ≥¥ Ï°∞Ìöå
      const { ok, plans } = await fetchPlansByDate(iso);

      // 2) Ìï¥Îãπ ÎÇ†Ïßú TaskItem Ï°∞Ìöå (ÌîåÎûú ÏóÜÏùÑ ÎïåÎèÑ Î™©Î°ùÏùÄ Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï®)
      const items = await fetchDayItems(iso);

      // ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
      if ($planDateLabel) $planDateLabel.textContent = iso;

      if (!ok || !plans.length) {
        // ÌîåÎûúÏù¥ ÏóÜÏñ¥ÎèÑ TaskItemÏù¥ ÏûàÏúºÎ©¥ Í∑∏Í≤ÉÎßå ÌëúÏãú
        if ($planIdEl) $planIdEl.textContent = "-";
        if ($planCntEl) $planCntEl.textContent = String(items.length);
        if ($planMinEl) {
          const totalMin = items.reduce((s, x) => s + (Number(x.duration_min) || 0), 0);
          $planMinEl.textContent = String(totalMin);
        }
        renderTasksList(items);
        window.currentPlan = undefined;
        return;
      }

      // 3) ÌîåÎûú 1Í∞ú ÏÑ†ÌÉù
      const plan = plans[0];
      window.currentPlan = plan;

      // 4) Ìï©Í≥Ñ/Ïπ¥Ïö¥Ìä∏ Í≥ÑÏÇ∞ ÌõÑ Î†åÎçî
      const totalMin = (plan.total_duration_min != null)
        ? Number(plan.total_duration_min)
        : items.reduce((s, x) => s + (Number(x.duration_min) || 0), 0);

      renderCurrentPlan(
        { id: plan.id, tasks: items, tasks_count: items.length, total_duration_min: totalMin },
        d
      );
    } finally {
      if (typeof hideLoading === "function") hideLoading();
    }
  }

  // ========= Î™©Î°ù Î†åÎçî =========
  function renderTasksList(items) {
    if (!$list) return;
    if (!Array.isArray(items) || !items.length) {
      $list.innerHTML = "<em>No tasks yet</em>";
      return;
    }

    $list.innerHTML = items.map((t) => `
      <div class="task row between" data-id="${t.id}">
        <div>
          <b>${t?.exercise_detail?.name || t?.exercise_name || "(exercise)"}</b>
          <span class="muted">
            ${(t?.target_sets ?? "-")}x${(t?.target_reps ?? "-")}
            ¬∑ ${t?.intensity ?? "-"} ¬∑ ${t?.duration_min ?? 0}m
          </span>
        </div>
        <div class="row" style="gap:6px;">
          <button class="btn btn--ghost" data-action="delete" aria-label="Delete Task">Delete</button>
        </div>
      </div>
    `).join("");

    // ÏÇ≠Ï†ú ÎèôÏûë
    $list.querySelectorAll("[data-action='delete']").forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        const el = e.currentTarget.closest(".task");
        const id = Number(el?.dataset?.id);
        if (!id) return;
        if (!confirm("ÏÇ≠Ï†úÌï†ÍπåÏöî?")) return;
        try {
          const r = await fetch(`${API_BASE}/taskitems/${id}/`, {
            method: "DELETE",
            headers: authHeaders(),
            credentials: "same-origin",
          });
          if (r.ok || r.status === 204) {
            await reloadPlanFor(selectedDate);
          } else {
            if (typeof toastError === "function") toastError("ÏÇ≠Ï†ú Ïã§Ìå®");
            else alert("ÏÇ≠Ï†ú Ïã§Ìå®");
          }
        } catch {
          if (typeof toastError === "function") toastError("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò");
          else alert("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò");
        }
      });
    });
  }

  function renderCurrentPlan(planLike, d) {
    const items = Array.isArray(planLike?.tasks) ? planLike.tasks : [];

    if ($planDateLabel) $planDateLabel.textContent = fmtISO(d);
    if ($planIdEl) $planIdEl.textContent = planLike?.id ?? "-";
    if ($planCntEl) $planCntEl.textContent = planLike?.tasks_count ?? items.length;

    const totalMin = planLike?.total_duration_min ?? items.reduce((s, x) => s + (Number(x.duration_min) || 0), 0);
    if ($planMinEl) $planMinEl.textContent = totalMin;

    renderTasksList(items);

    // Ïô∏Î∂ÄÏóêÏÑú Ïû¨ÏÇ¨Ïö©Ìï† Ïàò ÏûàÍ≤å ÎÖ∏Ï∂ú
    window.renderCurrentPlan = renderCurrentPlan;
  }

  // ========= Ensure Today Plan =========
  async function ensureTodayPlan() {
    try {
      if (typeof showLoading === "function") showLoading("Ensuring today plan...");
      const res = await fetch(ENSURE_URL, {
        method: "POST",
        headers: authHeaders(),
        credentials: "same-origin",
      });
      const body = await res.json().catch(() => ({}));
      if (!res.ok) {
        const msg = body?.detail || `Ensure failed (HTTP ${res.status})`;
        if (typeof toastError === "function") toastError(msg);
        throw new Error(msg);
      }
      // Ïò§Îäò ÎÇ†ÏßúÎ°ú Î¶¨Î°úÎìú
      const today = TODAY;
      window.currentPlan = body || window.currentPlan;
      await reloadPlanFor(today);

      // ÌîåÎûú ÏúÑÏûêÎìúÍ∞Ä ÏûàÏúºÎ©¥ Ïó¥Í∏∞
      if (typeof window.openPlanWizard === "function") {
        window.openPlanWizard();
      }
    } catch (err) {
      console.error(err);
    } finally {
      if (typeof hideLoading === "function") hideLoading();
    }
  }

  // ========= Ï¥àÍ∏∞Ìôî =========
  function initOnce() {
    if (isInitBound) return;
    isInitBound = true;

    // date input Ï¥àÍ∏∞Í∞í/Î≤îÏúÑ
    if ($dateInput) {
      $dateInput.min = fmtISO(RANGE_START);
      $dateInput.max = fmtISO(RANGE_END);
      $dateInput.value = fmtISO(TODAY);
    }

    // ÎÇ†Ïßú Î°úÎìú
    if ($loadByDate) {
      $loadByDate.addEventListener("click", (e) => {
        e.preventDefault();
        const v = $dateInput?.value;
        if (!v) return alert("ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.");
        const d = new Date(v + "T00:00:00");
        selectDate(d, { load: true, rerender: true });
      });
    }

    // Ensure Today
    if ($ensureToday) {
      $ensureToday.addEventListener("click", async (e) => {
        e.preventDefault();
        const btn = e.currentTarget;
        btn.disabled = true;
        try {
          await selectDate(TODAY, { load: false, rerender: true });
          await ensureTodayPlan();
        } finally {
          btn.disabled = false;
        }
      });
    }

    // Prev/Next
    document.getElementById("wk-prev-day")?.addEventListener("click", () => {
      selectDate(addDays(selectedDate, -1), { load: true, rerender: true });
    });
    document.getElementById("wk-next-day")?.addEventListener("click", () => {
      selectDate(addDays(selectedDate, 1), { load: true, rerender: true });
    });

    // ÏúÑÏûêÎìúÏóêÏÑú ÌîåÎûú ÏÉùÏÑ±/ÏàòÏ†ï ÏôÑÎ£å ‚Üí ÌòÑÏû¨/Ïò§Îäò Í∞±Ïã†
    window.addEventListener("plan:updated", (ev) => {
      const plan = ev.detail || {};
      const created = plan?.created_at ? new Date(plan.created_at) : TODAY;
      const sameDay = fmtISO(created) === fmtISO(selectedDate);
      if (sameDay) reloadPlanFor(selectedDate);
      else if (fmtISO(created) === fmtISO(TODAY)) selectDate(TODAY);
    });
  }

  async function boot() {
    initOnce();
    // Ï¥àÍ∏∞ ÏßÑÏûÖ: Ïò§Îäò Í∏∞Ï§Ä
    await selectDate(TODAY, { load: true, rerender: true });
  }

  // ÎÖ∏Ï∂ú (Îã§Î•∏ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÍ≤å)
  window.reloadPlanFor = reloadPlanFor;
  window.selectDate = selectDate;
  window.ensureTodayPlan = ensureTodayPlan;

  // Ïã§Ìñâ
  document.readyState === "loading"
    ? document.addEventListener("DOMContentLoaded", boot)
    : boot();
})();

// --- [ÏòµÏÖò] Task ÏôÑÎ£å ÌÜ†Í∏Ä (C5) ---------------------------------------------
async function toggleTaskCompletion(taskId, completed) {
  try {
    const r = await fetch(`${API_BASE}/taskitems/${taskId}/`, {
      method: "PATCH",
      headers: authHeaders(),
      credentials: "same-origin",
      body: JSON.stringify({ completed: !!completed })
    });
    if (!r.ok) throw new Error(`PATCH ${r.status}`);
    await reloadPlanFor(selectedDate);
  } catch (e) {
    if (typeof toastError === "function") toastError("ÌÜ†Í∏Ä Ïã§Ìå®");
    else alert("ÌÜ†Í∏Ä Ïã§Ìå®");
  }
}

// Î†åÎçî Ïãú Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä & ÌÜ†Í∏Ä Î∞îÏù∏Îî© (renderTasksList ÍµêÏ≤¥Ïö© Ìó¨Ìçº)
function renderTasksList(items) {
  if (!$list) return;
  if (!Array.isArray(items) || !items.length) {
    $list.innerHTML = "<em>No tasks yet</em>";
    return;
  }

  $list.innerHTML = items.map((t) => {
    const done = !!t.completed;
    return `
      <div class="task row between" data-id="${t.id}">
        <label class="row" style="gap:8px; align-items:center; cursor:pointer;">
          <input type="checkbox" data-action="toggle" ${done ? "checked" : ""} aria-label="Complete Task">
          <div>
            <b>${t?.exercise_detail?.name || t?.exercise_name || "(exercise)"}</b>
            <span class="muted">
              ${(t?.target_sets ?? "-")}x${(t?.target_reps ?? "-")}
              ¬∑ ${t?.intensity ?? "-"} ¬∑ ${t?.duration_min ?? 0}m
            </span>
          </div>
        </label>
        <div class="row" style="gap:6px;">
          <button class="btn btn--ghost" data-action="delete" aria-label="Delete Task">Delete</button>
        </div>
      </div>
    `;
  }).join("");

  // Ï≤¥ÌÅ¨ ÌÜ†Í∏Ä
  $list.querySelectorAll("[data-action='toggle']").forEach((cb) => {
    cb.addEventListener("change", async (e) => {
      const el = e.currentTarget.closest(".task");
      const id = Number(el?.dataset?.id);
      await toggleTaskCompletion(id, e.currentTarget.checked);
    });
  });

  // ÏÇ≠Ï†ú
  $list.querySelectorAll("[data-action='delete']").forEach((btn) => {
    btn.addEventListener("click", async (e) => {
      const el = e.currentTarget.closest(".task");
      const id = Number(el?.dataset?.id);
      if (!id) return;
      if (!confirm("ÏÇ≠Ï†úÌï†ÍπåÏöî?")) return;
      try {
        const r = await fetch(`${API_BASE}/taskitems/${id}/`, {
          method: "DELETE",
          headers: authHeaders(),
          credentials: "same-origin",
        });
        if (r.ok || r.status === 204) await reloadPlanFor(selectedDate);
        else (typeof toastError === "function" ? toastError("ÏÇ≠Ï†ú Ïã§Ìå®") : alert("ÏÇ≠Ï†ú Ïã§Ìå®"));
      } catch {
        (typeof toastError === "function" ? toastError("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò") : alert("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò"));
      }
    });
  });
}

