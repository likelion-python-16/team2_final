"""
Django settings for team2_final project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# .env 로드
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 로컬 개발 기본 도메인 (OAuth 콜백 포함)
# ※ 카카오/네이버 콘솔에 등록된 주소와 "완전히" 동일해야 합니다.
SITE_URL = os.environ.get("SITE_URL", "http://127.0.0.1:8000")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-8ro5jdf4f%7^yw+pft$ari3*&qeuaa*^p&$5t2x!c(e+svry++'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() == "true"
if DEBUG:
    SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-insecure-secret-key")
else:
    SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]  # 배포에서는 반드시 env로 주입

# 호스트/CSRF 설정
# env가 비어 있으면 로컬 기본 허용(127.0.0.1, localhost)
_env_hosts = os.getenv("DJANGO_ALLOWED_HOSTS", "")
if _env_hosts:
    ALLOWED_HOSTS = [h.strip() for h in _env_hosts.split(",") if h.strip()]
else:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

CSRF_TRUSTED_ORIGINS = []
for h in ALLOWED_HOSTS:
    if not h:
        continue
    # 개발용 8000 포트도 허용 (필요 시 제거)
    CSRF_TRUSTED_ORIGINS += [f"http://{h}", f"https://{h}", f"http://{h}:8000", f"https://{h}:8000"]

# ── 개발환경용 보안 기본값 (프록시/터널 사용 시 HTTPS 오인 방지) ──
# http→https 강제 금지
SECURE_SSL_REDIRECT = False
# 프록시의 HTTPS 헤더 신뢰하지 않음 (로컬에서 https로 인식되는 문제 방지)
SECURE_PROXY_SSL_HEADER = None
# 호스트 헤더 재작성 신뢰 안 함
USE_X_FORWARDED_HOST = False
# 로컬 쿠키는 http로
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # DRF
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    "drf_spectacular",
    'drf_spectacular_sidecar',

    # 내 앱들
    'users',
    'tasks',
    'goals',
    'intakes',
    'feedbacks',
    'utils',
]

# DRF 설정
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    # 기본: GET은 익명 허용, POST/PUT/DELETE는 인증 필요
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # 개발 편의용
    ],
    "EXCEPTION_HANDLER": "utils.exceptions.custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# JWT 설정
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365*10),  # 10년
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365*20), # 20년
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # 'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,      # 블랙리스트 안 쓰므로 False
    'BLACKLIST_AFTER_ROTATION': False,   # 블랙리스트 안 쓰므로 False
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'team2_final.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'team2_final.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DB_ENGINE = os.getenv("DB_ENGINE", "sqlite").lower()
if DB_ENGINE == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "team2_final"),
            "USER": os.getenv("POSTGRES_USER", "team2_user"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "supersecret"),
            "HOST": os.getenv("POSTGRES_HOST", "db"),
            "PORT": os.getenv("POSTGRES_PORT", "5432"),
            "CONN_MAX_AGE": 60,
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.getenv("SQLITE_PATH", BASE_DIR / "db.sqlite3"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'ko-kr'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
    # BASE_DIR / 'team2_final' / 'static',
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 커스텀 유저 모델 설정 (이 줄이 중요!)
AUTH_USER_MODEL = 'users.CustomUser'

# 로그인/로그아웃 이동
LOGIN_REDIRECT_URL = '/tasks/dashboard/'   # 로그인 후 항상 대시보드로
LOGOUT_REDIRECT_URL = '/'                  # 로그아웃 후 메인(landing)으로

# ─────────────────────────────────────────────────────────────
# OAuth 설정
#  - 뷰 코드가 settings의 REDIRECT_URI를 그대로 사용하므로
#    로컬(dev)에서는 http 콜백을 "정확히" 고정하세요.
#  - 카카오/네이버 콘솔 Redirect URI와 1바이트도 다르면 400 발생.
# ─────────────────────────────────────────────────────────────
OAUTH = {
    "KAKAO": {
        "CLIENT_ID": os.environ.get("KAKAO_CLIENT_ID", ""),
        "CLIENT_SECRET": os.environ.get("KAKAO_CLIENT_SECRET", ""),
        "REDIRECT_URI": os.environ.get(
            "KAKAO_REDIRECT_URI",
            f"{SITE_URL}/users/oauth/kakao/callback/",
        ),
        "AUTH_URL": "https://kauth.kakao.com/oauth/authorize",
        "TOKEN_URL": "https://kauth.kakao.com/oauth/token",
        "ME_URL": "https://kapi.kakao.com/v2/user/me",
        "SCOPE": ["profile_nickname"],
    },
    "NAVER": {
        "CLIENT_ID": os.environ.get("NAVER_CLIENT_ID", ""),
        "CLIENT_SECRET": os.environ.get("NAVER_CLIENT_SECRET", ""),
        "REDIRECT_URI": os.environ.get(
            "NAVER_REDIRECT_URI",
            f"{SITE_URL}/users/oauth/naver/callback/",
        ),
        "AUTH_URL": "https://nid.naver.com/oauth2.0/authorize",
        "TOKEN_URL": "https://nid.naver.com/oauth2.0/token",
        "ME_URL": "https://openapi.naver.com/v1/nid/me",
        "SCOPE": ["name", "email"],  # 표기는 의미상, 실제는 state 필수
    },
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Team2 Final API',
    'DESCRIPTION': 'Workout/Meal Tracking API',
    'VERSION': '0.1.0',
}
