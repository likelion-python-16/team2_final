services:
  db:
    image: postgres:16
    container_name: team2_final_db
    ports:
      - "5432:5432"   # 로컬 runserver가 컨테이너 DB에 붙기 위함
    environment:
      POSTGRES_DB: team2_final
      POSTGRES_USER: team2_user
      POSTGRES_PASSWORD: supersecret
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h db -U team2_user -d team2_final || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: team2/api:dev
    depends_on:
      db:
        condition: service_healthy
    environment:
      IN_DOCKER: "1"                          # 컨테이너 감지( settings 분기용 )
      DJANGO_SETTINGS_MODULE: team2_final.settings
      DJANGO_TIME_ZONE: Asia/Seoul
      DJANGO_DEBUG: "False"
      DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,host.docker.internal
      POSTGRES_DB: team2_final
      POSTGRES_USER: team2_user
      POSTGRES_PASSWORD: supersecret
      POSTGRES_HOST: db                       # 컨테이너 내부는 db로 접속
      POSTGRES_PORT: "5432"
      # 실제 비밀키는 .env/Secrets로 주입 권장 (레포엔 .env.example만)
      DJANGO_SECRET_KEY: "CHANGE_ME_FOR_LOCAL_ONLY"
    ports:
      - "8001:8000"                           # ← 호스트 8001, 컨테이너 8000 (로컬은 8000 사용)
    restart: unless-stopped
    command:
      - bash
      - -lc
      - >
        python manage.py collectstatic --noinput &&
        python manage.py migrate --noinput &&
        exec gunicorn team2_final.wsgi:application -b 0.0.0.0:8000 --workers 3 --threads 2 --timeout 60 --chdir /app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 6
      start_period: 45s

  prometheus:
    image: prom/prometheus:latest
    container_name: team2_final_prom
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
