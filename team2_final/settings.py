"""
Django settings for team2_final project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

- DB 우선순위: DATABASE_URL > DB_* > POSTGRES_* > sqlite
- 도커 기본 호스트는 'db', DOCKER_LOCAL=1이면 host.docker.internal
"""

import os
from datetime import timedelta
from pathlib import Path
from urllib.parse import urlparse

import environ
from dotenv import dotenv_values, load_dotenv

env = environ.Env()

# ─────────────────────────────────────────────────────────────────────────────
# 기본 경로 / .env 로드
# ─────────────────────────────────────────────────────────────────────────────
BASE_DIR = Path(__file__).resolve().parent.parent

ENV_PATH = BASE_DIR / ".env"
if ENV_PATH.exists():
    # 로컬 개발 편의를 위해 override=True (배포에서는 OS env가 우선이 되도록 False도 가능)
    load_dotenv(ENV_PATH, override=True)
else:
    print(f"[dotenv] .env not found at {ENV_PATH}")

# .env 주입 실패 케이스를 대비해 파일을 직접 파싱해 병합하는 헬퍼
_ENV_FILE_VARS = {}
try:
    _ENV_FILE_VARS = dotenv_values(ENV_PATH) if ENV_PATH.exists() else {}
except Exception as _e:
    print("[dotenv] parse error:", _e)


def env_get(key: str, default=None):
    """OS 환경변수 → .env 파일 값 → 기본값 순으로 조회"""
    v = os.getenv(key)
    if v not in (None, ""):
        return v
    v = _ENV_FILE_VARS.get(key)
    if v not in (None, ""):
        return v
    return default


# ─────────────────────────────────────────────────────────────────────────────
# 0) 환경 준비
# ─────────────────────────────────────────────────────────────────────────────
DJANGO_ENV = env_get("DJANGO_ENV", "local").lower()
IN_DOCKER = env_get("IN_DOCKER") == "1"

DEBUG = env_get("DJANGO_DEBUG", "False").lower() == "true"
PROM_ENABLED = env_get("DJANGO_PROM_ENABLED", "True").lower() == "true"

# ─────────────────────────────────────────────────────────────────────────────
# 1) SECRET_KEY
# ─────────────────────────────────────────────────────────────────────────────
SECRET_KEY = env_get("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    if DJANGO_ENV == "local" and DEBUG:
        SECRET_KEY = "dev-insecure-secret-key"
    else:
        raise RuntimeError("DJANGO_SECRET_KEY가 설정되지 않았습니다. (배포/CI는 필수)")

# ─────────────────────────────────────────────────────────────────────────────
# 2) 기본 보안/쿠키 플래그 (모두 env 기반; 기본은 HTTP 친화)
# ─────────────────────────────────────────────────────────────────────────────
SITE_URL = env_get("SITE_URL", "http://127.0.0.1:8000")

# HTTPS 사용 시 True로 바꾸면 됨
SECURE_SSL_REDIRECT = env_get("SECURE_SSL_REDIRECT", "False").lower() == "true"

# ★ 핵심: HTTP 임시 모드 기본값(False). HTTPS 전환 시 compose/env에서 True로만 바꾸면 됨.
SESSION_COOKIE_SECURE = env_get("SESSION_COOKIE_SECURE", "False").lower() == "true"
CSRF_COOKIE_SECURE = env_get("CSRF_COOKIE_SECURE", "False").lower() == "true"

# SameSite 기본값은 Lax (세션/CSRF 각각 분리 지정 가능)
SESSION_COOKIE_SAMESITE = env_get("SESSION_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE = env_get("CSRF_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_HTTPONLY = env_get("CSRF_COOKIE_HTTPONLY", "False").lower() == "true"

# ─────────────────────────────────────────────────────────────────────────────
# 리버스 프록시가 X-Forwarded-Proto를 전달하면 True
USE_X_FORWARDED_PROTO = env_get("USE_X_FORWARDED_PROTO", "False").lower() == "true"
SECURE_PROXY_SSL_HEADER = (
    ("HTTP_X_FORWARDED_PROTO", "https") if USE_X_FORWARDED_PROTO else None
)

# 호스트 헤더 신뢰 (필요 시만 True)
USE_X_FORWARDED_HOST = env_get("USE_X_FORWARDED_HOST", "False").lower() == "true"

# ★ 핵심: HTTP 임시 모드 기본값(False). HTTPS 전환 시 compose/env에서 True로만 바꾸면 됨.
SESSION_COOKIE_SECURE = env_get("SESSION_COOKIE_SECURE", "False").lower() == "true"
CSRF_COOKIE_SECURE = env_get("CSRF_COOKIE_SECURE", "False").lower() == "true"

# SameSite 기본값은 Lax (세션/CSRF 각각 분리 지정 가능)
SESSION_COOKIE_SAMESITE = env_get("SESSION_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE = env_get("CSRF_COOKIE_SAMESITE", "Lax")

# ─────────────────────────────────────────────────────────────────────────────
# 3) ALLOWED_HOSTS / CSRF_TRUSTED_ORIGINS
# ─────────────────────────────────────────────────────────────────────────────
_env_hosts = env_get("DJANGO_ALLOWED_HOSTS", "")
if _env_hosts:
    ALLOWED_HOSTS = [h.strip() for h in _env_hosts.split(",") if h.strip()]
else:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

CSRF_TRUSTED_ORIGINS: list[str] = []


def _add_csrf_origins(host: str):
    # 포트가 바뀌는 환경(nginx:80/443, dev 8000/8001) 모두 대비
    CSRF_TRUSTED_ORIGINS.extend(
        [
            f"http://{host}",
            f"https://{host}",
            f"http://{host}:8000",
            f"https://{host}:8000",
            f"http://{host}:8001",
            f"https://{host}:8001",
        ]
    )


for _h in ALLOWED_HOSTS:
    if _h:
        _add_csrf_origins(_h)

# ─────────────────────────────────────────────────────────────────────────────
# 4) 외부 토큰/상수
# ─────────────────────────────────────────────────────────────────────────────
HF_TOKEN = env_get("HF_TOKEN")
HF_IMAGE_MODEL = env_get("HF_IMAGE_MODEL")
HF_TEXT_MODEL = env_get("HF_TEXT_MODEL")

MFDS_FOOD_CSV = BASE_DIR / "intakes" / "data" / "mfds_foods.csv"
MEAL_MATCH_THRESHOLD = float(env_get("MEAL_MATCH_THRESHOLD", "70.0"))
ALLOW_FALLBACK_SAVE_BELOW = (
    env_get("ALLOW_FALLBACK_SAVE_BELOW", "True").lower() == "true"
)
DEFAULT_FALLBACK_KCAL = float(env_get("DEFAULT_FALLBACK_KCAL", "300.0"))
MFDS_CSV_PATH = MFDS_FOOD_CSV

# ─────────────────────────────────────────────────────────────────────────────
# 5) 앱 설정
# ─────────────────────────────────────────────────────────────────────────────
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "rest_framework",
    "rest_framework_simplejwt",
    "django_filters",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "corsheaders",
    # 내 앱들
    "users",
    "tasks",
    "goals",
    "intakes",
    "feedbacks",
    "utils",
    "ai",
]

if PROM_ENABLED:
    try:
        import django_prometheus  # noqa: F401

        INSTALLED_APPS.append("django_prometheus")
    except Exception:
        PROM_ENABLED = False  # 모듈 없으면 자동 비활성화

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "EXCEPTION_HANDLER": "utils.exceptions.custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365 * 10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365 * 20),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if PROM_ENABLED:
    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        *MIDDLEWARE,
        "django_prometheus.middleware.PrometheusAfterMiddleware",
    ]

ROOT_URLCONF = "team2_final.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "team2_final.wsgi.application"


# ─────────────────────────────────────────────────────────────────────────────
# 6) Database — 우선순위 로직
# ─────────────────────────────────────────────────────────────────────────────
def _pg_host_default() -> str:
    """도커 내부 기본 호스트는 'db', 로컬-도커 교차 시 DOCKER_LOCAL=1이면 host.docker.internal"""
    return "host.docker.internal" if env_get("DOCKER_LOCAL", "0") == "1" else "db"


def _db_from_url(url: str):
    p = urlparse(url)
    scheme = (p.scheme or "").lower()
    if scheme.startswith("postgres"):
        return {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": (p.path or "/").lstrip("/") or "postgres",
            "USER": p.username or "",
            "PASSWORD": p.password or "",
            "HOST": p.hostname or _pg_host_default(),
            "PORT": str(p.port or 5432),
            "CONN_MAX_AGE": int(
                env_get("POSTGRES_CONN_MAX_AGE", env_get("CONN_MAX_AGE", "60"))
            ),
        }
    elif scheme.startswith("sqlite"):
        sqlite_path = p.path or (BASE_DIR / "db.sqlite3")
        return {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": str(sqlite_path if isinstance(sqlite_path, Path) else sqlite_path),
        }
    # 알 수 없는 스킴이면 안전하게 sqlite
    return {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }


DATABASE_URL = env_get("DATABASE_URL")

if DATABASE_URL:
    DATABASES = {"default": _db_from_url(DATABASE_URL)}
else:
    # 1) DB_* 세트 우선
    DB_NAME = env_get("DB_NAME")
    DB_USER = env_get("DB_USER")
    DB_PASSWORD = env_get("DB_PASSWORD")
    DB_HOST = env_get("DB_HOST")
    DB_PORT = env_get("DB_PORT", "5432")

    # 2) POSTGRES_* 세트(기존 compose 스타일)
    PG_NAME = env_get("POSTGRES_DB")
    PG_USER = env_get("POSTGRES_USER")
    PG_PASSWORD = env_get("POSTGRES_PASSWORD")
    PG_HOST = env_get("POSTGRES_HOST")
    PG_PORT = env_get("POSTGRES_PORT", "5432")

    if DB_NAME and DB_USER and (DB_HOST or PG_HOST):
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": DB_NAME,
                "USER": DB_USER,
                "PASSWORD": DB_PASSWORD or "",
                "HOST": DB_HOST or PG_HOST or _pg_host_default(),
                "PORT": DB_PORT,
                "CONN_MAX_AGE": int(
                    env_get("POSTGRES_CONN_MAX_AGE", env_get("CONN_MAX_AGE", "60"))
                ),
            }
        }
    elif PG_NAME and PG_USER:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": PG_NAME,
                "USER": PG_USER,
                "PASSWORD": PG_PASSWORD or "",
                "HOST": PG_HOST or _pg_host_default(),
                "PORT": PG_PORT,
                "CONN_MAX_AGE": int(
                    env_get("POSTGRES_CONN_MAX_AGE", env_get("CONN_MAX_AGE", "60"))
                ),
            }
        }
    else:
        # Fallback: 개발용 sqlite
        SQLITE_PATH = env_get("SQLITE_PATH", BASE_DIR / "db.sqlite3")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": SQLITE_PATH,
            }
        }

# ─────────────────────────────────────────────────────────────────────────────
# 7) 패스워드 정책
# ─────────────────────────────────────────────────────────────────────────────
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ─────────────────────────────────────────────────────────────────────────────
# 8) 국제화/시간대
# ─────────────────────────────────────────────────────────────────────────────
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True

# ─────────────────────────────────────────────────────────────────────────────
# 9) 정적/미디어
# ─────────────────────────────────────────────────────────────────────────────
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ─────────────────────────────────────────────────────────────────────────────
# 10) 기본 PK 유형
# ─────────────────────────────────────────────────────────────────────────────
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ─────────────────────────────────────────────────────────────────────────────
# 11) 사용자 인증 모델/리다이렉트
# ─────────────────────────────────────────────────────────────────────────────
AUTH_USER_MODEL = "users.CustomUser"
LOGIN_REDIRECT_URL = "/tasks/dashboard/"
LOGOUT_REDIRECT_URL = "/"

# ─────────────────────────────────────────────────────────────────────────────
# 12) OAuth (카카오/네이버)
# ─────────────────────────────────────────────────────────────────────────────
OAUTH = {
    "KAKAO": {
        "CLIENT_ID": env_get("KAKAO_CLIENT_ID", ""),
        "CLIENT_SECRET": env_get("KAKAO_CLIENT_SECRET", ""),
        "REDIRECT_URI": env_get(
            "KAKAO_REDIRECT_URI", f"{SITE_URL}/users/oauth/kakao/callback/"
        ),
        "AUTH_URL": "https://kauth.kakao.com/oauth/authorize",
        "TOKEN_URL": "https://kauth.kakao.com/oauth/token",
        "ME_URL": "https://kapi.kakao.com/v2/user/me",
        "SCOPE": ["profile_nickname"],
    },
    "NAVER": {
        "CLIENT_ID": env_get("NAVER_CLIENT_ID", ""),
        "CLIENT_SECRET": env_get("NAVER_CLIENT_SECRET", ""),
        "REDIRECT_URI": env_get(
            "NAVER_REDIRECT_URI", f"{SITE_URL}/users/oauth/naver/callback/"
        ),
        "AUTH_URL": "https://nid.naver.com/oauth2.0/authorize",
        "TOKEN_URL": "https://nid.naver.com/oauth2.0/token",
        "ME_URL": "https://openapi.naver.com/v1/nid/me",
        "SCOPE": ["name", "email"],
    },
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Team2 Final API",
    "DESCRIPTION": "Workout/Meal Tracking API",
    "VERSION": "0.1.0",
}

WORKOUT_KCAL_PER_MIN = 5

# ─────────────────────────────────────────────────────────────────────────────
# 13) CORS
# ─────────────────────────────────────────────────────────────────────────────
_front_origins = env_get("CORS_ALLOWED_ORIGINS", "")
if _front_origins:
    CORS_ALLOWED_ORIGINS = [o.strip() for o in _front_origins.split(",") if o.strip()]
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://localhost:8001",
        "http://127.0.0.1:8001",
    ]

CORS_ALLOW_HEADERS = (
    list(env_get("CORS_ALLOW_HEADERS", "").split(","))
    if env_get("CORS_ALLOW_HEADERS")
    else [
        "authorization",
        "content-type",
        "x-csrftoken",
        "accept",
        "accept-language",
        "origin",
    ]
)
CORS_ALLOW_CREDENTIALS = True

# ───────── AI Utils 퍼지 매칭 설정 ─────────
FUZZY_SCORE_THRESHOLD = 86.0
FUZZY_CANDIDATES_LIMIT = 7
